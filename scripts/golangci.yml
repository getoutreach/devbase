# yaml-language-server: $schema=https://json.schemastore.org/golangci-lint
version: "2"
lintroller:
  tier: "platinum"
output:
  formats:
    text:
      path: stdout
linters:
  # Inverted configuration with enable-all and disable is not scalable during updates of golangci-lint.
  default: none
  enable:
    - bodyclose
    - copyloopvar # Detects places where loop variables are copied.
    - dogsled
    - errcheck
    - errorlint
    - exhaustive # Checks exhaustiveness of enum switch statements.
    - funlen
    - gochecknoinits
    - goconst
    - gocritic
    - gocyclo
    - gosec
    - govet
    - ineffassign
    - lll
    # - misspell        # The reason we're disabling this right now is because it uses 1/2 of the memory of the run.
    - nakedret
    - revive
    - staticcheck
    - unconvert
    - unparam
    - unused
    - whitespace
  settings:
    dupl:
      threshold: 100
    errcheck:
      check-blank: true
    funlen:
      lines: 500
      statements: 50
    goconst:
      min-len: 3
      min-occurrences: 3
    gocritic:
      disabled-checks:
        - whyNoLint # Doesn't seem to work properly
      enabled-tags:
        - diagnostic
        - experimental
        - opinionated
        - performance
        - style
    gocyclo:
      min-complexity: 25
    govet:
      enable:
        - shadow
    lll:
      line-length: 140
    revive:
      rules:
        # Enable the default golint rules. We must include these because
        # we configure a single rule, which disables the default rules.
        - name: blank-imports
        - name: context-as-argument
        - name: context-keys-type
        - name: dot-imports
        - name: error-return
        - name: error-strings
        - name: error-naming
        - name: exported
        - name: increment-decrement
        - name: var-naming
        - name: var-declaration
        - name: package-comments
        - name: range
        - name: receiver-naming
        - name: time-naming
        - name: unexported-return
        - name: indent-error-flow
        - name: errorf
        - name: empty-block
        - name: superfluous-else
        - name: unreachable-code
        - name: redefines-builtin-id
        # While we agree with this rule, right now it would break too many
        # projects. So, we disable it by default.
        - name: unused-parameter
          disabled: true
  exclusions:
    generated: lax
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    rules:
      # Exclude some linters from running on tests files.
      - linters:
          - errcheck
          - funlen
          - gochecknoglobals # Globals in test files are tolerated.
          - goconst # Repeated consts in test files are tolerated.
          - gocyclo
          - gosec
        path: _test\.go
      # This rule is buggy and breaks on our `///Block` lines.  Disable for now.
      - linters:
          - gocritic
        text: "commentFormatting: put a space"
      # This rule incorrectly flags nil references after assert.Assert(t, x != nil)
      - linters:
          - staticcheck
        path: _test\.go
        text: SA5011
      - linters:
          - lll
        source: "^//go:generate "
      # We allow error shadowing
      - path: (.+)\.go$
        text: declaration of "err" shadows declaration at
    paths:
      - third_party$
      - builtin$
      - examples$
issues:
  max-same-issues: 10
formatters:
  enable:
    - gofmt
    - goimports
  exclusions:
    generated: lax
    paths:
      - third_party$
      - builtin$
      - examples$
