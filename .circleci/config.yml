version: 2.1

commands:
  with_job_span:
    parameters:
      steps:
        type: steps
    steps:
      - run:
          name: Creating span for job
          command: |-
            echo "STEP_START=$(date +%s)" >> $BASH_ENV
            echo "STEP_SPAN_ID=$(echo $CIRCLE_JOB | sum | cut -f 1 -d \ )" >> $BASH_ENV
      - steps: << parameters.steps >>
      - run:
          name: Finishing span for job
          command: buildevents step "$CIRCLE_WORKFLOW_ID" "$STEP_SPAN_ID" "$STEP_START" "$CIRCLE_JOB"
          when: always

jobs:
  ###Block(circleJobs)
  ###EndBlock(circleJobs)
  send_traces:
    docker:
      - image: gcr.io/outreach-docker/buildevents:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_ACCOUNT
    steps:
      - run:
          name: Watch for workflow to finish
          command: /tmp/buildevents watch $CIRCLE_WORKFLOW_ID

  test: # runs not using Workflows must have a build job as entry point
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/cimg/go
      - image: gcr.io/outreach-docker/bootstrap/testbed:1.15.2
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_ACCOUNT
    # directory where steps are run.
    working_directory: ~/devbase
    steps: # steps that comprise the build job
      - with_job_span:
          steps:
            # adds the ssh key that Wheatley put here for us.  Ask Wheatley on slack to "setup circle for <project_name>"
            # see https://outreach-io.atlassian.net/wiki/spaces/EN/pages/701596137/Services+Checklist for the setup process
            - add_ssh_keys
            - checkout
            - run: echo "add tests!"

  release-dryrun:
    docker:
      - image: gcr.io/outreach-docker/bootstrap/testbed:1.15.2
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_ACCOUNT
    environment:
      GOPRIVATE: github.com/getoutreach/*
      GOPROXY: https://proxy.golang.org
    steps:
      - with_job_span:
          steps:
            - setup_remote_docker:
                docker_layer_caching: true
                version: 19.03.13
            - checkout
            - add_ssh_keys
            - restore_cache:
                keys:
                  - v1-release-node-cache-{{ checksum "package.json" }}
                  - v1-release-node-cache-
            - run:
                name: Install semantic-release Dependencies
                command: buildevents cmd $CIRCLE_WORKFLOW_ID $STEP_SPAN_ID install-sem-release-dependencies -- yarn --frozen-lockfile
            - save_cache:
                key: v1-release-node-cache-{{  checksum "package.json" }}
                paths:
                  - node_modules
            - run:
                name: Release (Dry-run)
                command: |-
                  # Make https://github.com/pvdlg/env-ci/blob/master/services/circleci.js
                  # think we're not on a PR.

                  # Store these and set them after
                  OLD_CIRCLE_PR_NUMBER=$CIRCLE_PR_NUMBER
                  OLD_CIRCLE_PULL_REQUEST=$CIRCLE_PULL_REQUEST
                  OLD_CI_PULL_REQUEST=$CI_PULL_REQUEST
                  OLD_CIRCLE_BRANCH=$CIRCLE_BRANCH

                  # Fetch the API URL for usage later.
                  # 19 comes from the length of https://github.com/
                  export CIRCLE_PR_API_URL=$(echo "https://api.github.com/repos/${CIRCLE_PULL_REQUEST:19}" | sed "s/\/pull\//\/pulls\//")

                  # Remove evidence of us being on a PR.
                  unset CIRCLE_PR_NUMBER
                  unset CIRCLE_PULL_REQUEST
                  unset CI_PULL_REQUEST

                  # Fetch the base branch from the API, since CircleCI doesn't expose it.
                  export CIRCLE_BRANCH=$(curl -s -H "Authorization: token ${OUTREACH_GITHUB_TOKEN}" "$CIRCLE_PR_API_URL" | jq -r '.base.ref')

                  # Act like we're on the base branch.
                  git branch -D "$CIRCLE_BRANCH"  || true
                  git checkout -b "$CIRCLE_BRANCH" || true

                  # Run the releaser now.
                  GH_TOKEN=$OUTREACH_GITHUB_TOKEN yarn --frozen-lockfile semantic-release --dry-run

                  export CIRCLE_PR_NUMBER=$OLD_CIRCLE_PR_NUMBER
                  export CIRCLE_PULL_REQUEST=$OLD_CIRCLE_PULL_REQUEST
                  export CI_PULL_REQUEST=$OLD_CI_PULL_REQUEST
                  export CIRCLE_BRANCH=$OLD_CIRCLE_BRANCH
  release:
    docker:
      - image: gcr.io/outreach-docker/bootstrap/testbed:1.15.2
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_ACCOUNT
    environment:
      GOPRIVATE: github.com/getoutreach/*
      GOPROXY: https://proxy.golang.org
    steps:
      - with_job_span:
          steps:
            - setup_remote_docker:
                docker_layer_caching: true
                version: 19.03.13
            - checkout
            - add_ssh_keys
            - restore_cache:
                keys:
                  - v1-release-node-cache-{{ checksum "package.json" }}
                  - v1-release-node-cache-
            - run:
                name: Install semantic-release Dependencies
                command: buildevents cmd $CIRCLE_WORKFLOW_ID $STEP_SPAN_ID install-sem-release-dependencies -- yarn --frozen-lockfile
            - save_cache:
                key: v1-release-node-cache-{{  checksum "package.json" }}
                paths:
                  - node_modules
            - run:
                name: Release
                command: |
                  export GH_TOKEN=$OUTREACH_GITHUB_TOKEN
                  buildevents cmd $CIRCLE_WORKFLOW_ID $STEP_SPAN_ID semantic-release -- yarn --frozen-lockfile semantic-release

workflows:
  version: 2
  ###Block(circleWorkflows)
  ###EndBlock(circleWorkflows)
  build_and_test:
    jobs:
      - send_traces:
          context:
            - docker-registry
            - buildevents
      ###Block(circleWorkflowJobs)
      ###EndBlock(circleWorkflowJobs)
      - release:
          context:
            - docker-registry
            - buildevents
          requires:
            - test
          filters:
            branches:
              only:
                - master
                - main
      - release-dryrun:
          context:
            - docker-registry
            - buildevents
          filters:
            branches:
              ignore:
                - master
                - main
      - test:
          context:
            - docker-registry
            - buildevents
          filters:
            # This enables running test when a tag is created.
            # This still runs on each branch.
            tags:
              only: /v\d+(\.\d+)*(-.*)*/
