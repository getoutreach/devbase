#!/usr/bin/env bash
#MISE description="Sync service catalog values if it is not managed by a Stencil module."
#MISE tools={"gojq" = "latest"}

set -euo pipefail

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
DEVBASE_LIB_DIR="$DIR/../../../../shell/lib"
# shellcheck source=../../../../shell/lib/bootstrap.sh
source "$DEVBASE_LIB_DIR/bootstrap.sh"
# shellcheck source=../../../../shell/lib/logging.sh
source "$DEVBASE_LIB_DIR/logging.sh"
# shellcheck source=../../../../shell/lib/sed.sh
source "$DEVBASE_LIB_DIR/sed.sh"

sync_cortex() {
  info "Syncing cortex.yaml"
  local golang_version lintroller reporting_team

  lintroller="$(stencil_arg lintroller)"
  if [[ -z $lintroller ]]; then
    fatal "lintroller field is missing in service.yaml"
  fi
  sed_replace '\(lintroller:\) .\+' "\1 $lintroller" cortex.yaml

  reporting_team="$(stencil_arg reportingTeam)"
  if [[ -z $reporting_team ]]; then
    fatal "reportingTeam field is missing in service.yaml"
  fi
  sed_replace '\(reporting_team:\) .\+' "\1 $reporting_team" cortex.yaml

  golang_version="$(grep -w ^golang .tool-versions | awk '{print $2}')"
  if [[ -n $golang_version ]]; then
    sed_replace '\(golang_version:\) .\+' "\1 $golang_version" cortex.yaml
  fi

  sed_replace '\(stencil_version:\) .\+' "\1 $(stencil_version)" cortex.yaml
}

if ! managed_by_stencil cortex.yaml; then
  sync_cortex
fi
